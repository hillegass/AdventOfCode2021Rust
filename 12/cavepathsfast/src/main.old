use std::collections::HashMap;
use std::io::{self, BufRead};
use std::collections::HashSet;

fn is_lowercase(s: &str) -> bool {
    s.chars().all(|c| c.is_lowercase())
}

fn number_of_paths_not_using(
    last_node: &String,
    to_avoid: &HashSet<String>,
    graph: &HashMap<String, Vec<String>>,
    has_free_pass: bool
) -> i32 {
    if last_node == "end" {
        return 1;
    } 
    let mut sum = 0;
    for next_node in graph.get(last_node).unwrap() {
        if is_lowercase(next_node) {
            if to_avoid.contains(next_node) {
                if has_free_pass {
                    sum += number_of_paths_not_using(&next_node,
                          &to_avoid,
                          graph,
                          false);
                }
            } else {
                let mut new_to_avoid = to_avoid.clone();
                new_to_avoid.insert(next_node.clone());
                sum += number_of_paths_not_using(&next_node, 
                &new_to_avoid, graph, has_free_pass);
            }
        } else {
            sum += number_of_paths_not_using(&next_node, 
                   &to_avoid, graph, has_free_pass);
        }
    }
    sum
}

fn main() {
    let mut map: HashMap<String, Vec<String>> = HashMap::new();
    let stdin = io::stdin();
    for line in stdin.lock().lines() {
        let linestr = line.unwrap().clone();
        let values = linestr.split("-").collect::<Vec<_>>();
        if values.len() < 2 {
            continue;
        }
        let a = String::from(values[0]);
        let b = String::from(values[1]);

        if a.ne("end") && b.ne("start") {
            println!("{}->{}", a, b);
            if map.contains_key(&a) {
                let v = map.get_mut(&a).unwrap();
                v.push(b.to_string());
            } else {
                let mut v = Vec::new();
                v.push(b.to_string());
                map.insert(a.to_string(), v);
            }
        }

        if b.ne("end") && a.ne("start") {
            println!("{}->{}", b, a);
            if map.contains_key(&b) {
                let v = map.get_mut(&b).unwrap();
                v.push(a.to_string());
            } else {
                let mut v = Vec::new();
                v.push(a.to_string());
                map.insert(b.to_string(), v);
            }
        }
    }
    println!("{:?}", map);

    let path_count = number_of_paths_not_using(&String::from("start"),
            &HashSet::new(),
            &map,true);

    //println!("{:?}", all_paths);
    println!("{}", path_count);
}
